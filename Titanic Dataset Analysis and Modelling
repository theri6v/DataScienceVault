{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/rishavwalde/titanic-dataset-analysis-and-modelling?scriptVersionId=194892056\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"0525d351","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-09-01T10:01:33.576821Z","iopub.status.busy":"2024-09-01T10:01:33.576001Z","iopub.status.idle":"2024-09-01T10:01:36.916587Z","shell.execute_reply":"2024-09-01T10:01:36.915549Z"},"papermill":{"duration":3.352502,"end_time":"2024-09-01T10:01:36.91915","exception":false,"start_time":"2024-09-01T10:01:33.566648","status":"completed"},"tags":[]},"outputs":[],"source":["## Import Libraries\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import plotly.express as px\n","from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n","from sklearn.ensemble import RandomForestClassifier, StackingClassifier, VotingClassifier\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.preprocessing import PolynomialFeatures, StandardScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from sklearn.impute import SimpleImputer\n","from sklearn.feature_selection import RFE\n","import xgboost as xgb\n","from xgboost import XGBClassifier\n","from catboost import CatBoostClassifier"]},{"cell_type":"markdown","id":"c46764c3","metadata":{"papermill":{"duration":0.006082,"end_time":"2024-09-01T10:01:36.932019","exception":false,"start_time":"2024-09-01T10:01:36.925937","status":"completed"},"tags":[]},"source":["# Load Data"]},{"cell_type":"code","execution_count":2,"id":"5c0f559f","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:36.947337Z","iopub.status.busy":"2024-09-01T10:01:36.946132Z","iopub.status.idle":"2024-09-01T10:01:36.977695Z","shell.execute_reply":"2024-09-01T10:01:36.976731Z"},"papermill":{"duration":0.041902,"end_time":"2024-09-01T10:01:36.980291","exception":false,"start_time":"2024-09-01T10:01:36.938389","status":"completed"},"tags":[]},"outputs":[],"source":["# Load train and test datasets\n","train = pd.read_csv('/kaggle/input/titanic-cleaned-data/train_clean.csv')\n","test = pd.read_csv('/kaggle/input/titanic-cleaned-data/test_clean.csv')"]},{"cell_type":"markdown","id":"2d785bb4","metadata":{"papermill":{"duration":0.00614,"end_time":"2024-09-01T10:01:36.992872","exception":false,"start_time":"2024-09-01T10:01:36.986732","status":"completed"},"tags":[]},"source":["# Data Exploration"]},{"cell_type":"code","execution_count":3,"id":"58ced261","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:37.007563Z","iopub.status.busy":"2024-09-01T10:01:37.006615Z","iopub.status.idle":"2024-09-01T10:01:37.025577Z","shell.execute_reply":"2024-09-01T10:01:37.024483Z"},"papermill":{"duration":0.028906,"end_time":"2024-09-01T10:01:37.028144","exception":false,"start_time":"2024-09-01T10:01:36.999238","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["    Age Cabin Embarked     Fare  \\\n","0  22.0   NaN        S   7.2500   \n","1  38.0   C85        C  71.2833   \n","2  26.0   NaN        S   7.9250   \n","3  35.0  C123        S  53.1000   \n","4  35.0   NaN        S   8.0500   \n","\n","                                                Name  Parch  PassengerId  \\\n","0                            Braund, Mr. Owen Harris      0            1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...      0            2   \n","2                             Heikkinen, Miss. Laina      0            3   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)      0            4   \n","4                           Allen, Mr. William Henry      0            5   \n","\n","   Pclass     Sex  SibSp  Survived            Ticket Title  Family_Size  \n","0       3    male      1       0.0         A/5 21171    Mr            1  \n","1       1  female      1       1.0          PC 17599   Mrs            1  \n","2       3  female      0       1.0  STON/O2. 3101282  Miss            0  \n","3       1  female      1       1.0            113803   Mrs            1  \n","4       3    male      0       0.0            373450    Mr            0  \n"]}],"source":["# Data exploration\n","print(train.head())"]},{"cell_type":"code","execution_count":4,"id":"279f7a7a","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:37.04331Z","iopub.status.busy":"2024-09-01T10:01:37.042465Z","iopub.status.idle":"2024-09-01T10:01:37.071145Z","shell.execute_reply":"2024-09-01T10:01:37.070036Z"},"papermill":{"duration":0.038677,"end_time":"2024-09-01T10:01:37.073485","exception":false,"start_time":"2024-09-01T10:01:37.034808","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["              Age        Fare       Parch  PassengerId      Pclass  \\\n","count  891.000000  891.000000  891.000000   891.000000  891.000000   \n","mean    29.445196   32.204208    0.381594   446.000000    2.308642   \n","std     13.244896   49.693429    0.806057   257.353842    0.836071   \n","min      0.420000    0.000000    0.000000     1.000000    1.000000   \n","25%     22.000000    7.910400    0.000000   223.500000    2.000000   \n","50%     30.000000   14.454200    0.000000   446.000000    3.000000   \n","75%     35.500000   31.000000    0.000000   668.500000    3.000000   \n","max     80.000000  512.329200    6.000000   891.000000    3.000000   \n","\n","            SibSp    Survived  Family_Size  \n","count  891.000000  891.000000   891.000000  \n","mean     0.523008    0.383838     0.904602  \n","std      1.102743    0.486592     1.613459  \n","min      0.000000    0.000000     0.000000  \n","25%      0.000000    0.000000     0.000000  \n","50%      0.000000    0.000000     0.000000  \n","75%      1.000000    1.000000     1.000000  \n","max      8.000000    1.000000    10.000000  \n"]}],"source":["print(train.describe())"]},{"cell_type":"code","execution_count":5,"id":"38e35799","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:37.088163Z","iopub.status.busy":"2024-09-01T10:01:37.087764Z","iopub.status.idle":"2024-09-01T10:01:37.094962Z","shell.execute_reply":"2024-09-01T10:01:37.093823Z"},"papermill":{"duration":0.017543,"end_time":"2024-09-01T10:01:37.097508","exception":false,"start_time":"2024-09-01T10:01:37.079965","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Age              0\n","Cabin          687\n","Embarked         0\n","Fare             0\n","Name             0\n","Parch            0\n","PassengerId      0\n","Pclass           0\n","Sex              0\n","SibSp            0\n","Survived         0\n","Ticket           0\n","Title            0\n","Family_Size      0\n","dtype: int64\n"]}],"source":["print(train.isnull().sum())"]},{"cell_type":"markdown","id":"37e9373a","metadata":{"papermill":{"duration":0.006268,"end_time":"2024-09-01T10:01:37.110456","exception":false,"start_time":"2024-09-01T10:01:37.104188","status":"completed"},"tags":[]},"source":["# Data Visualization"]},{"cell_type":"code","execution_count":6,"id":"42456297","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:37.125573Z","iopub.status.busy":"2024-09-01T10:01:37.124778Z","iopub.status.idle":"2024-09-01T10:01:37.521344Z","shell.execute_reply":"2024-09-01T10:01:37.520343Z"},"papermill":{"duration":0.406522,"end_time":"2024-09-01T10:01:37.523521","exception":false,"start_time":"2024-09-01T10:01:37.116999","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["sns.barplot(x='Sex', y='Survived', data=train)\n","plt.title('Survival Rate by Gender')\n","plt.show()"]},{"cell_type":"code","execution_count":7,"id":"1c39f394","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:37.539668Z","iopub.status.busy":"2024-09-01T10:01:37.538482Z","iopub.status.idle":"2024-09-01T10:01:37.882233Z","shell.execute_reply":"2024-09-01T10:01:37.881166Z"},"papermill":{"duration":0.353976,"end_time":"2024-09-01T10:01:37.884383","exception":false,"start_time":"2024-09-01T10:01:37.530407","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n","  with pd.option_context('mode.use_inf_as_na', True):\n"]},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["sns.histplot(train['Age'].dropna(), bins=30, kde=True)\n","plt.title('Age Distribution')\n","plt.show()"]},{"cell_type":"code","execution_count":8,"id":"2778082b","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:37.901033Z","iopub.status.busy":"2024-09-01T10:01:37.900617Z","iopub.status.idle":"2024-09-01T10:01:38.189079Z","shell.execute_reply":"2024-09-01T10:01:38.187995Z"},"papermill":{"duration":0.299366,"end_time":"2024-09-01T10:01:38.191277","exception":false,"start_time":"2024-09-01T10:01:37.891911","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["sns.barplot(x='Pclass', y='Survived', data=train)\n","plt.title('Survival Rate by Pclass')\n","plt.show()"]},{"cell_type":"code","execution_count":9,"id":"de90e429","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:38.209042Z","iopub.status.busy":"2024-09-01T10:01:38.208268Z","iopub.status.idle":"2024-09-01T10:01:39.869459Z","shell.execute_reply":"2024-09-01T10:01:39.868444Z"},"papermill":{"duration":1.672566,"end_time":"2024-09-01T10:01:39.871701","exception":false,"start_time":"2024-09-01T10:01:38.199135","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["        <script type=\"text/javascript\">\n","        window.PlotlyConfig = {MathJaxConfig: 'local'};\n","        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n","        if (typeof require !== 'undefined') {\n","        require.undef(\"plotly\");\n","        requirejs.config({\n","            paths: {\n","                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n","            }\n","        });\n","        require(['plotly'], function(Plotly) {\n","            window._Plotly = Plotly;\n","        });\n","        }\n","        </script>\n","        "]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<div>                            <div id=\"f55e987b-577e-4d88-a53f-54093c96ebb1\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f55e987b-577e-4d88-a53f-54093c96ebb1\")) {                    Plotly.newPlot(                        \"f55e987b-577e-4d88-a53f-54093c96ebb1\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sex=male\\u003cbr\\u003ePclass=%{x}\\u003cbr\\u003eSurvived=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"male\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"male\",\"offsetgroup\":\"male\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[3,3,3,1,3,3,3,3,2,2,2,1,3,1,3,1,2,1,1,3,3,3,3,3,3,3,3,1,1,3,3,3,1,3,1,3,3,3,2,2,3,3,3,3,3,2,3,3,1,3,3,3,3,3,1,3,3,3,1,1,2,3,1,3,3,3,3,3,1,3,3,3,2,1,2,3,2,1,3,3,3,3,3,3,2,2,1,3,1,3,2,2,3,2,2,2,3,3,3,1,3,3,3,3,3,3,3,3,1,3,1,3,3,1,3,3,2,3,2,3,2,1,1,3,3,2,2,3,3,3,3,3,3,3,3,3,1,3,3,2,3,2,2,3,2,3,3,1,3,2,3,2,3,2,2,2,2,2,2,3,3,1,1,2,3,1,3,3,3,1,1,2,3,3,1,3,1,2,3,3,3,3,3,1,3,3,3,2,2,3,1,3,1,3,3,3,1,2,3,2,2,3,3,3,3,1,1,3,3,1,3,1,2,2,2,2,3,3,3,1,3,3,3,3,3,2,3,3,3,1,3,3,1,1,3,3,3,3,2,3,3,1,3,3,3,2,2,3,3,3,2,3,2,3,3,3,2,3,2,3,3,3,3,3,3,3,1,3,1,1,2,3,3,3,1,1,1,2,3,1,1,3,3,1,3,1,3,1,2,3,3,2,1,3,3,3,1,2,3,3,3,2,3,1,1,3,3,3,3,1,1,3,3,3,3,3,1,1,3,3,3,3,1,3,1,3,3,3,3,3,3,1,3,2,3,3,1,3,2,1,1,2,3,2,1,2,3,3,1,1,3,3,2,3,3,3,3,3,2,1,3,3,3,2,1,3,2,1,3,3,3,3,2,3,3,3,1,3,1,3,1,3,3,1,3,3,3,3,2,3,1,3,3,3,1,2,3,3,1,3,1,1,3,2,3,3,3,1,3,1,3,3,3,2,3,2,1,1,3,1,3,3,2,2,3,3,1,2,2,2,3,3,1,1,3,3,2,2,3,3,3,1,3,3,1,2,3,1,3,1,3,3,2,1,3,1,1,3,2,3,3,3,3,2,2,1,3,2,3,2,2,2,3,1,3,3,1,1,3,3,1,3,1,3,3,3,3,2,3,2,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,3,3,3,3,3,1,3,2,1,3,2,3,2,1,3,3,3,1,2,3,3,2,3,1,2,3,3,3,1,3,3,3,2,3,2,3,3,3,3,3,3,1,3,2,3,3,3,3,3,2,3,3,1,3,3,2,2,1,3,3,3,1,3,3,3,3,3,2,3,2,1,3],\"xaxis\":\"x\",\"y\":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sex=female\\u003cbr\\u003ePclass=%{x}\\u003cbr\\u003eSurvived=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"female\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"female\",\"offsetgroup\":\"female\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[1,3,1,3,2,3,1,3,2,3,3,3,3,3,3,1,3,3,3,3,2,2,3,3,3,1,2,2,2,1,2,3,3,3,3,2,3,1,2,3,3,3,3,3,3,3,2,3,3,2,1,3,3,3,3,1,3,2,1,3,3,1,3,3,3,2,3,1,1,3,2,3,3,2,1,3,1,3,1,3,3,2,3,3,3,2,3,3,3,1,1,1,2,3,1,1,2,3,1,3,3,3,1,1,3,1,1,3,2,1,1,1,1,1,2,3,2,1,1,2,2,1,2,3,1,3,1,1,1,2,2,3,1,2,3,3,3,1,3,3,1,3,1,3,1,3,1,2,2,1,3,3,2,3,3,3,1,3,2,2,3,3,2,2,3,2,1,3,2,2,2,2,3,1,2,3,2,2,3,3,3,3,1,1,1,3,3,3,1,2,1,2,2,1,1,2,2,3,3,2,1,1,1,3,3,2,3,1,1,3,3,3,1,3,2,1,3,2,1,1,1,3,2,2,2,1,3,3,2,3,2,1,3,2,3,1,3,3,3,2,3,3,3,1,2,3,3,3,1,3,3,1,3,2,1,1,1,2,2,2,3,3,1,3,1,2,2,2,1,1,1,3,2,2,3,1,3,1,3,3,1,3,3,2,3,1,3,3,1,3,1,3,1,1,1,3,1,2,3,1,3,1,3,2,2,1,2,3,1,2,3,3,1,3],\"xaxis\":\"x\",\"y\":[1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Pclass\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Survived\"}},\"legend\":{\"title\":{\"text\":\"Sex\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Survival Rate by Pclass and Gender\"},\"barmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f55e987b-577e-4d88-a53f-54093c96ebb1');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                });            </script>        </div>"]},"metadata":{},"output_type":"display_data"}],"source":["fig = px.bar(train, x='Pclass', y='Survived', color='Sex', barmode='group', title='Survival Rate by Pclass and Gender')\n","fig.show()"]},{"cell_type":"markdown","id":"ceffb14c","metadata":{"papermill":{"duration":0.00777,"end_time":"2024-09-01T10:01:39.887707","exception":false,"start_time":"2024-09-01T10:01:39.879937","status":"completed"},"tags":[]},"source":["# Preprocessing"]},{"cell_type":"code","execution_count":10,"id":"4ad27613","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:39.905699Z","iopub.status.busy":"2024-09-01T10:01:39.905298Z","iopub.status.idle":"2024-09-01T10:01:39.918466Z","shell.execute_reply":"2024-09-01T10:01:39.91749Z"},"papermill":{"duration":0.024762,"end_time":"2024-09-01T10:01:39.920547","exception":false,"start_time":"2024-09-01T10:01:39.895785","status":"completed"},"tags":[]},"outputs":[],"source":["# Fill missing values and encode categorical variables\n","train['Embarked'] = train['Embarked'].fillna('U')  # 'U' for Unknown\n","train['Embarked'] = train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2, 'U': 3})\n","train['Sex'] = train['Sex'].map({'male': 0, 'female': 1})\n","\n","columns_to_drop = ['Name', 'Ticket', 'Cabin']\n","columns_existing = [col for col in columns_to_drop if col in train.columns]\n","train = train.drop(columns=columns_existing)\n","\n","# Fill missing values\n","train['Age'] = train['Age'].fillna(train['Age'].median())\n","\n","# Prepare features and target variable\n","X = train.drop(columns=['Survived'])\n","y = train['Survived']"]},{"cell_type":"markdown","id":"c5ad82de","metadata":{"papermill":{"duration":0.007878,"end_time":"2024-09-01T10:01:39.936774","exception":false,"start_time":"2024-09-01T10:01:39.928896","status":"completed"},"tags":[]},"source":["# Define Preprocessing Pipeline"]},{"cell_type":"code","execution_count":11,"id":"eb66f1cd","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:39.955234Z","iopub.status.busy":"2024-09-01T10:01:39.954341Z","iopub.status.idle":"2024-09-01T10:01:39.979624Z","shell.execute_reply":"2024-09-01T10:01:39.978664Z"},"papermill":{"duration":0.037079,"end_time":"2024-09-01T10:01:39.98195","exception":false,"start_time":"2024-09-01T10:01:39.944871","status":"completed"},"tags":[]},"outputs":[],"source":["# Identify categorical and numerical columns\n","categorical_cols = ['Sex', 'Embarked']\n","numerical_cols = X.select_dtypes(include=['number']).columns.tolist()\n","\n","# Define preprocessing pipeline\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('cat', Pipeline(steps=[\n","            ('imputer', SimpleImputer(strategy='most_frequent')),\n","            ('encoder', OneHotEncoder(sparse_output=False, drop='first'))\n","        ]), categorical_cols),\n","        ('num', Pipeline(steps=[\n","            ('imputer', SimpleImputer(strategy='mean')),\n","            ('scaler', StandardScaler())\n","        ]), numerical_cols)\n","    ],\n","    remainder='passthrough'\n",")\n","\n","# Apply preprocessing\n","X_preprocessed = preprocessor.fit_transform(X)"]},{"cell_type":"markdown","id":"a76bd722","metadata":{"papermill":{"duration":0.007768,"end_time":"2024-09-01T10:01:39.997856","exception":false,"start_time":"2024-09-01T10:01:39.990088","status":"completed"},"tags":[]},"source":["# Feature Selection"]},{"cell_type":"code","execution_count":12,"id":"d4cad41b","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:40.016578Z","iopub.status.busy":"2024-09-01T10:01:40.015614Z","iopub.status.idle":"2024-09-01T10:01:40.026057Z","shell.execute_reply":"2024-09-01T10:01:40.024865Z"},"papermill":{"duration":0.022384,"end_time":"2024-09-01T10:01:40.028268","exception":false,"start_time":"2024-09-01T10:01:40.005884","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["['x0_1' 'x1_1' 'x1_2' 'Age' 'Embarked' 'Fare' 'Parch' 'PassengerId'\n"," 'Pclass' 'Sex' 'SibSp' 'Family_Size' 'x0_1' 'x1_1' 'x1_2' 'Age'\n"," 'Embarked' 'Fare' 'Parch' 'PassengerId' 'Pclass' 'Sex' 'SibSp'\n"," 'Family_Size' 'x0_1 x1_1' 'x0_1 x1_2' 'x0_1 Age' 'x0_1 Embarked'\n"," 'x0_1 Fare' 'x0_1 Parch' 'x0_1 PassengerId' 'x0_1 Pclass' 'x0_1 Sex'\n"," 'x0_1 SibSp' 'x0_1 Family_Size' 'x1_1 x1_2' 'x1_1 Age' 'x1_1 Embarked'\n"," 'x1_1 Fare' 'x1_1 Parch' 'x1_1 PassengerId' 'x1_1 Pclass' 'x1_1 Sex'\n"," 'x1_1 SibSp' 'x1_1 Family_Size' 'x1_2 Age' 'x1_2 Embarked' 'x1_2 Fare'\n"," 'x1_2 Parch' 'x1_2 PassengerId' 'x1_2 Pclass' 'x1_2 Sex' 'x1_2 SibSp'\n"," 'x1_2 Family_Size' 'Age Embarked' 'Age Fare' 'Age Parch'\n"," 'Age PassengerId' 'Age Pclass' 'Age Sex' 'Age SibSp' 'Age Family_Size'\n"," 'Embarked Fare' 'Embarked Parch' 'Embarked PassengerId' 'Embarked Pclass'\n"," 'Embarked Sex' 'Embarked SibSp' 'Embarked Family_Size' 'Fare Parch'\n"," 'Fare PassengerId' 'Fare Pclass' 'Fare Sex' 'Fare SibSp'\n"," 'Fare Family_Size' 'Parch PassengerId' 'Parch Pclass' 'Parch Sex'\n"," 'Parch SibSp' 'Parch Family_Size' 'PassengerId Pclass' 'PassengerId Sex'\n"," 'PassengerId SibSp' 'PassengerId Family_Size' 'Pclass Sex' 'Pclass SibSp'\n"," 'Pclass Family_Size' 'Sex SibSp' 'Sex Family_Size' 'SibSp Family_Size']\n"]}],"source":["# Assume `numerical_cols` is a list of your numerical feature names\n","\n","# Get feature names after one-hot encoding\n","categorical_feature_names = preprocessor.named_transformers_['cat'].named_steps['encoder'].get_feature_names_out()\n","\n","# Combine categorical and numerical features for polynomial transformation\n","all_features = np.concatenate((categorical_feature_names, numerical_cols))\n","\n","# Create PolynomialFeatures object\n","poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)\n","\n","# Fit the PolynomialFeatures object on some sample data (this can be your actual data)\n","# Here, X is the dataset containing the actual data used for transformation\n","# Note: You should use the same data that is used for transforming in your pipeline\n","X_sample = np.random.rand(10, len(all_features))  # This is just an example; use your actual data here\n","poly.fit(X_sample)\n","\n","# Now, generate polynomial feature names\n","poly_feature_names = poly.get_feature_names_out(input_features=all_features)\n","\n","# Combine original feature names with polynomial features\n","feature_names = np.concatenate((all_features, poly_feature_names))\n","\n","print(feature_names)"]},{"cell_type":"code","execution_count":13,"id":"274fe987","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:40.047305Z","iopub.status.busy":"2024-09-01T10:01:40.046487Z","iopub.status.idle":"2024-09-01T10:01:40.063012Z","shell.execute_reply":"2024-09-01T10:01:40.061861Z"},"papermill":{"duration":0.028241,"end_time":"2024-09-01T10:01:40.06512","exception":false,"start_time":"2024-09-01T10:01:40.036879","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Polynomial features: ['Sex_0' 'Sex_1' 'Embarked_0' 'Embarked_1' 'Embarked_2' 'Age' 'Embarked'\n"," 'Fare' 'Parch' 'PassengerId' 'Pclass' 'Sex' 'SibSp' 'Family_Size'\n"," 'Sex_0 Sex_1' 'Sex_0 Embarked_0' 'Sex_0 Embarked_1' 'Sex_0 Embarked_2'\n"," 'Sex_0 Age' 'Sex_0 Embarked' 'Sex_0 Fare' 'Sex_0 Parch'\n"," 'Sex_0 PassengerId' 'Sex_0 Pclass' 'Sex_0 Sex' 'Sex_0 SibSp'\n"," 'Sex_0 Family_Size' 'Sex_1 Embarked_0' 'Sex_1 Embarked_1'\n"," 'Sex_1 Embarked_2' 'Sex_1 Age' 'Sex_1 Embarked' 'Sex_1 Fare'\n"," 'Sex_1 Parch' 'Sex_1 PassengerId' 'Sex_1 Pclass' 'Sex_1 Sex'\n"," 'Sex_1 SibSp' 'Sex_1 Family_Size' 'Embarked_0 Embarked_1'\n"," 'Embarked_0 Embarked_2' 'Embarked_0 Age' 'Embarked_0 Embarked'\n"," 'Embarked_0 Fare' 'Embarked_0 Parch' 'Embarked_0 PassengerId'\n"," 'Embarked_0 Pclass' 'Embarked_0 Sex' 'Embarked_0 SibSp'\n"," 'Embarked_0 Family_Size' 'Embarked_1 Embarked_2' 'Embarked_1 Age'\n"," 'Embarked_1 Embarked' 'Embarked_1 Fare' 'Embarked_1 Parch'\n"," 'Embarked_1 PassengerId' 'Embarked_1 Pclass' 'Embarked_1 Sex'\n"," 'Embarked_1 SibSp' 'Embarked_1 Family_Size' 'Embarked_2 Age'\n"," 'Embarked_2 Embarked' 'Embarked_2 Fare' 'Embarked_2 Parch'\n"," 'Embarked_2 PassengerId' 'Embarked_2 Pclass' 'Embarked_2 Sex'\n"," 'Embarked_2 SibSp' 'Embarked_2 Family_Size' 'Age Embarked' 'Age Fare'\n"," 'Age Parch' 'Age PassengerId' 'Age Pclass' 'Age Sex' 'Age SibSp'\n"," 'Age Family_Size' 'Embarked Fare' 'Embarked Parch' 'Embarked PassengerId'\n"," 'Embarked Pclass' 'Embarked Sex' 'Embarked SibSp' 'Embarked Family_Size'\n"," 'Fare Parch' 'Fare PassengerId' 'Fare Pclass' 'Fare Sex' 'Fare SibSp'\n"," 'Fare Family_Size' 'Parch PassengerId' 'Parch Pclass' 'Parch Sex'\n"," 'Parch SibSp' 'Parch Family_Size' 'PassengerId Pclass' 'PassengerId Sex'\n"," 'PassengerId SibSp' 'PassengerId Family_Size' 'Pclass Sex' 'Pclass SibSp'\n"," 'Pclass Family_Size' 'Sex SibSp' 'Sex Family_Size' 'SibSp Family_Size']\n"]}],"source":["# Column transformer to apply OneHotEncoder to categorical features\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('cat', OneHotEncoder(), categorical_cols),\n","        ('num', 'passthrough', numerical_cols)\n","    ]\n",")\n","\n","# Create a pipeline with the preprocessor and polynomial features\n","pipeline = Pipeline(steps=[\n","    ('preprocessor', preprocessor),\n","    ('poly', PolynomialFeatures(degree=2, interaction_only=True, include_bias=False))\n","])\n","\n","# Fit the pipeline and transform your data\n","X_poly = pipeline.fit_transform(X)\n","\n","# Get the feature names after one-hot encoding and polynomial transformation\n","categorical_feature_names = preprocessor.named_transformers_['cat'].get_feature_names_out(input_features=categorical_cols)\n","all_features = np.concatenate((categorical_feature_names, numerical_cols))\n","poly_feature_names = pipeline.named_steps['poly'].get_feature_names_out(input_features=all_features)\n","\n","print(\"Polynomial features:\", poly_feature_names)"]},{"cell_type":"code","execution_count":14,"id":"5b5ca3a3","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:40.084176Z","iopub.status.busy":"2024-09-01T10:01:40.083273Z","iopub.status.idle":"2024-09-01T10:01:43.567116Z","shell.execute_reply":"2024-09-01T10:01:43.565972Z"},"papermill":{"duration":3.496326,"end_time":"2024-09-01T10:01:43.569847","exception":false,"start_time":"2024-09-01T10:01:40.073521","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Selected features: ['Sex' 'Family_Size' 'Sex_1 Age' 'Sex_1 Pclass' 'Sex_1 Sex'\n"," 'Embarked_1 Parch' 'Age Parch' 'Age Pclass' 'Age Sex' 'Pclass SibSp']\n"]}],"source":["# Initialize scaler\n","scaler = StandardScaler()\n","\n","# Initialize model\n","model = LogisticRegression(max_iter=2000, solver='lbfgs')\n","\n","# Create a pipeline to scale data and apply RFE\n","pipeline = Pipeline(steps=[\n","    ('scaler', scaler),\n","    ('rfe', RFE(estimator=model, n_features_to_select=10))\n","])\n","\n","# Apply RFE\n","pipeline.fit(X_poly, y)\n","\n","# Get selected feature names\n","selected_features = np.array(poly_feature_names)[pipeline.named_steps['rfe'].support_]\n","print(\"Selected features:\", selected_features)"]},{"cell_type":"code","execution_count":15,"id":"98165b35","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:43.600283Z","iopub.status.busy":"2024-09-01T10:01:43.599671Z","iopub.status.idle":"2024-09-01T10:01:43.617712Z","shell.execute_reply":"2024-09-01T10:01:43.616606Z"},"papermill":{"duration":0.036525,"end_time":"2024-09-01T10:01:43.620467","exception":false,"start_time":"2024-09-01T10:01:43.583942","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Actual columns in X: Index(['Age', 'Embarked', 'Fare', 'Parch', 'PassengerId', 'Pclass', 'Sex',\n","       'SibSp', 'Title', 'Family_Size'],\n","      dtype='object')\n","Filtered categorical columns: []\n","Filtered numerical columns: []\n","Error: No valid columns for transformation.\n","Please check that the column names are correct and exist in the DataFrame.\n","Categorical columns provided: ['categorical_feature1', 'categorical_feature2']\n","Numerical columns provided: ['numerical_feature1', 'numerical_feature2']\n","Columns in DataFrame: Index(['Age', 'Embarked', 'Fare', 'Parch', 'PassengerId', 'Pclass', 'Sex',\n","       'SibSp', 'Title', 'Family_Size'],\n","      dtype='object')\n"]}],"source":["# Sample categorical and numerical columns\n","categorical_cols = ['categorical_feature1', 'categorical_feature2']  # Replace with your actual column names\n","numerical_cols = ['numerical_feature1', 'numerical_feature2']       # Replace with your actual column names\n","\n","# Print actual column names\n","print(\"Actual columns in X:\", X.columns)\n","\n","# Ensure categorical and numerical columns exist in X\n","categorical_cols = [col for col in categorical_cols if col in X.columns]\n","numerical_cols = [col for col in numerical_cols if col in X.columns]\n","\n","print(\"Filtered categorical columns:\", categorical_cols)\n","print(\"Filtered numerical columns:\", numerical_cols)\n","\n","# If all columns are missing, print an additional message and exit\n","if not categorical_cols and not numerical_cols:\n","    print(\"Error: No valid columns for transformation.\")\n","    print(\"Please check that the column names are correct and exist in the DataFrame.\")\n","    print(\"Categorical columns provided:\", ['categorical_feature1', 'categorical_feature2'])\n","    print(\"Numerical columns provided:\", ['numerical_feature1', 'numerical_feature2'])\n","    print(\"Columns in DataFrame:\", X.columns)\n","else:\n","    # Define the preprocessor\n","    preprocessor = ColumnTransformer(\n","        transformers=[\n","            ('cat', OneHotEncoder(), categorical_cols) if categorical_cols else ('cat', 'passthrough', []),\n","            ('num', 'passthrough', numerical_cols)\n","        ]\n","    )\n","\n","    # Preprocess the data\n","    X_processed = preprocessor.fit_transform(X)\n","\n","    # Check if X_processed has features\n","    if X_processed.shape[1] == 0:\n","        raise ValueError(\"The processed data has 0 features. Check the preprocessing steps.\")\n","\n","    # Generate polynomial features\n","    poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)\n","    X_poly = poly.fit_transform(X_processed)\n","\n","    # Generate feature names for polynomial features\n","    categorical_feature_names = preprocessor.named_transformers_.get('cat', OneHotEncoder()).get_feature_names_out() if categorical_cols else []\n","    all_features = np.concatenate((categorical_feature_names, numerical_cols))\n","    poly_feature_names = poly.get_feature_names_out(input_features=all_features)\n","\n","    # Initialize model and RFE\n","    model = LogisticRegression(max_iter=1000)\n","    rfe = RFE(estimator=model, n_features_to_select=10)\n","\n","    # Apply RFE\n","    rfe.fit(X_poly, y)\n","\n","    # Get selected feature names\n","    selected_features = np.array(poly_feature_names)[rfe.support_]\n","    print(\"Selected features:\", selected_features)"]},{"cell_type":"markdown","id":"b436c810","metadata":{"papermill":{"duration":0.018357,"end_time":"2024-09-01T10:01:43.653827","exception":false,"start_time":"2024-09-01T10:01:43.63547","status":"completed"},"tags":[]},"source":["# Split Data"]},{"cell_type":"code","execution_count":16,"id":"5832aa91","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:43.680345Z","iopub.status.busy":"2024-09-01T10:01:43.679907Z","iopub.status.idle":"2024-09-01T10:01:43.697216Z","shell.execute_reply":"2024-09-01T10:01:43.696138Z"},"papermill":{"duration":0.031328,"end_time":"2024-09-01T10:01:43.69971","exception":false,"start_time":"2024-09-01T10:01:43.668382","status":"completed"},"tags":[]},"outputs":[],"source":["# Split data\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Apply preprocessing to training and validation data\n","X_train_preprocessed = preprocessor.fit_transform(X_train)\n","X_val_preprocessed = preprocessor.transform(X_val)"]},{"cell_type":"markdown","id":"b4b14776","metadata":{"papermill":{"duration":0.008178,"end_time":"2024-09-01T10:01:43.716514","exception":false,"start_time":"2024-09-01T10:01:43.708336","status":"completed"},"tags":[]},"source":["# Model Training and Hyperparameter Tuning"]},{"cell_type":"code","execution_count":17,"id":"2c8a5337","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:43.735301Z","iopub.status.busy":"2024-09-01T10:01:43.734876Z","iopub.status.idle":"2024-09-01T10:01:43.750707Z","shell.execute_reply":"2024-09-01T10:01:43.749477Z"},"papermill":{"duration":0.027919,"end_time":"2024-09-01T10:01:43.752943","exception":false,"start_time":"2024-09-01T10:01:43.725024","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Actual columns in X_train: Index(['categorical_feature1', 'categorical_feature2', 'numerical_feature1',\n","       'numerical_feature2'],\n","      dtype='object')\n","Filtered categorical columns: ['categorical_feature1', 'categorical_feature2']\n","Filtered numerical columns: ['numerical_feature1', 'numerical_feature2']\n","Shape of X_train_preprocessed: (4, 8)\n","Sample of X_train_preprocessed: [[1.  0.  0.  1.  0.  0.  1.  5.1]\n"," [0.  1.  0.  0.  1.  0.  2.  6.2]\n"," [1.  0.  0.  1.  0.  0.  3.  7.3]\n"," [0.  0.  1.  0.  0.  1.  4.  8.4]]\n"]}],"source":["# Example data (replace with your actual data)\n","X_train = pd.DataFrame({\n","    'categorical_feature1': ['A', 'B', 'A', 'C'],\n","    'categorical_feature2': ['X', 'Y', 'X', 'Z'],\n","    'numerical_feature1': [1, 2, 3, 4],\n","    'numerical_feature2': [5.1, 6.2, 7.3, 8.4]\n","})\n","\n","categorical_cols = ['categorical_feature1', 'categorical_feature2']\n","numerical_cols = ['numerical_feature1', 'numerical_feature2']\n","\n","print(\"Actual columns in X_train:\", X_train.columns)\n","\n","# Ensure categorical and numerical columns exist in X_train\n","categorical_cols = [col for col in categorical_cols if col in X_train.columns]\n","numerical_cols = [col for col in numerical_cols if col in X_train.columns]\n","\n","print(\"Filtered categorical columns:\", categorical_cols)\n","print(\"Filtered numerical columns:\", numerical_cols)\n","\n","# Define the preprocessor\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('cat', OneHotEncoder(), categorical_cols) if categorical_cols else ('cat', 'passthrough', []),\n","        ('num', 'passthrough', numerical_cols)\n","    ]\n",")\n","\n","# Preprocess the data\n","X_train_preprocessed = preprocessor.fit_transform(X_train)\n","\n","# Check the shape and a sample\n","print(\"Shape of X_train_preprocessed:\", X_train_preprocessed.shape)\n","print(\"Sample of X_train_preprocessed:\", X_train_preprocessed[:5])"]},{"cell_type":"code","execution_count":18,"id":"40329f21","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:43.771892Z","iopub.status.busy":"2024-09-01T10:01:43.771142Z","iopub.status.idle":"2024-09-01T10:01:43.95895Z","shell.execute_reply":"2024-09-01T10:01:43.957914Z"},"papermill":{"duration":0.199839,"end_time":"2024-09-01T10:01:43.961407","exception":false,"start_time":"2024-09-01T10:01:43.761568","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;cat&#x27;, OneHotEncoder(),\n","                                                  [&#x27;categorical_feature1&#x27;,\n","                                                   &#x27;categorical_feature2&#x27;]),\n","                                                 (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n","                                                  [&#x27;numerical_feature1&#x27;,\n","                                                   &#x27;numerical_feature2&#x27;])])),\n","                (&#x27;classifier&#x27;, RandomForestClassifier())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;cat&#x27;, OneHotEncoder(),\n","                                                  [&#x27;categorical_feature1&#x27;,\n","                                                   &#x27;categorical_feature2&#x27;]),\n","                                                 (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n","                                                  [&#x27;numerical_feature1&#x27;,\n","                                                   &#x27;numerical_feature2&#x27;])])),\n","                (&#x27;classifier&#x27;, RandomForestClassifier())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;cat&#x27;, OneHotEncoder(),\n","                                 [&#x27;categorical_feature1&#x27;,\n","                                  &#x27;categorical_feature2&#x27;]),\n","                                (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n","                                 [&#x27;numerical_feature1&#x27;, &#x27;numerical_feature2&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;categorical_feature1&#x27;, &#x27;categorical_feature2&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;numerical_feature1&#x27;, &#x27;numerical_feature2&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div>"],"text/plain":["Pipeline(steps=[('preprocessor',\n","                 ColumnTransformer(transformers=[('cat', OneHotEncoder(),\n","                                                  ['categorical_feature1',\n","                                                   'categorical_feature2']),\n","                                                 ('num', 'passthrough',\n","                                                  ['numerical_feature1',\n","                                                   'numerical_feature2'])])),\n","                ('classifier', RandomForestClassifier())])"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["# Example data (replace with your actual data)\n","X_train = pd.DataFrame({\n","    'categorical_feature1': ['A', 'B', 'A', 'C'],\n","    'categorical_feature2': ['X', 'Y', 'X', 'Z'],\n","    'numerical_feature1': [1, 2, 3, 4],\n","    'numerical_feature2': [5.1, 6.2, 7.3, 8.4]\n","})\n","y_train = pd.Series([0, 1, 0, 1])  # Replace with your actual target values\n","\n","categorical_cols = ['categorical_feature1', 'categorical_feature2']\n","numerical_cols = ['numerical_feature1', 'numerical_feature2']\n","\n","# Define the preprocessor\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('cat', OneHotEncoder(), categorical_cols) if categorical_cols else ('cat', 'passthrough', []),\n","        ('num', 'passthrough', numerical_cols)\n","    ]\n",")\n","\n","# Define the model\n","model = RandomForestClassifier()\n","\n","# Create a pipeline\n","pipeline = Pipeline(steps=[\n","    ('preprocessor', preprocessor),\n","    ('classifier', model)\n","])\n","\n","# Ensure that X_train and y_train have the same number of samples\n","assert X_train.shape[0] == y_train.shape[0], \"Number of samples in X_train and y_train do not match!\"\n","\n","# Fit the model using the training data\n","pipeline.fit(X_train, y_train)\n","\n"]},{"cell_type":"markdown","id":"2136ef41","metadata":{"papermill":{"duration":0.008878,"end_time":"2024-09-01T10:01:43.979579","exception":false,"start_time":"2024-09-01T10:01:43.970701","status":"completed"},"tags":[]},"source":["# Model Evaluation"]},{"cell_type":"code","execution_count":19,"id":"0d5e1122","metadata":{"execution":{"iopub.execute_input":"2024-09-01T10:01:43.999785Z","iopub.status.busy":"2024-09-01T10:01:43.999347Z","iopub.status.idle":"2024-09-01T10:01:44.038081Z","shell.execute_reply":"2024-09-01T10:01:44.036956Z"},"papermill":{"duration":0.051599,"end_time":"2024-09-01T10:01:44.040365","exception":false,"start_time":"2024-09-01T10:01:43.988766","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Length of X_val: 4\n","Length of y_val: 4\n","Classification Metrics:\n","Accuracy: 1.0\n","Precision: 1.0\n","Recall: 1.0\n","F1 Score: 1.0\n","Confusion Matrix:\n"," [[2 0]\n"," [0 2]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00         2\n","           1       1.00      1.00      1.00         2\n","\n","    accuracy                           1.00         4\n","   macro avg       1.00      1.00      1.00         4\n","weighted avg       1.00      1.00      1.00         4\n","\n"]}],"source":["# Example data (replace with your actual validation or test data)\n","X_val = pd.DataFrame({\n","    'categorical_feature1': ['A', 'B', 'A', 'C'],\n","    'categorical_feature2': ['X', 'Y', 'X', 'Z'],\n","    'numerical_feature1': [1, 2, 3, 4],\n","    'numerical_feature2': [5.1, 6.2, 7.3, 8.4]\n","})\n","y_val = pd.Series([0, 1, 0, 1])  # Replace with your actual target values\n","\n","# Check lengths\n","print(\"Length of X_val:\", len(X_val))\n","print(\"Length of y_val:\", len(y_val))\n","\n","# Ensure lengths match\n","if len(X_val) != len(y_val):\n","    raise ValueError(\"Mismatch between number of samples in X_val and y_val\")\n","\n","# Proceed with predictions and evaluation\n","y_pred = pipeline.predict(X_val)\n","\n","# Evaluate the model (for classification)\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\n","\n","accuracy = accuracy_score(y_val, y_pred)\n","precision = precision_score(y_val, y_pred, average='weighted')\n","recall = recall_score(y_val, y_pred, average='weighted')\n","f1 = f1_score(y_val, y_pred, average='weighted')\n","conf_matrix = confusion_matrix(y_val, y_pred)\n","class_report = classification_report(y_val, y_pred)\n","\n","print(\"Classification Metrics:\")\n","print(\"Accuracy:\", accuracy)\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1 Score:\", f1)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":26502,"sourceId":3136,"sourceType":"competition"},{"datasetId":80599,"sourceId":187274,"sourceType":"datasetVersion"}],"dockerImageVersionId":30761,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":13.918971,"end_time":"2024-09-01T10:01:44.871501","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-09-01T10:01:30.95253","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}